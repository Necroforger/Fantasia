package main

import (
	"log"

	"Fantasia/modules/audio"
	"Fantasia/modules/booru"
	"Fantasia/modules/channelpipe"
	"Fantasia/modules/dashboard"
	"Fantasia/modules/eval"
	"Fantasia/modules/general"
	"Fantasia/modules/images"
	"Fantasia/modules/information"
	"Fantasia/modules/javascript"
	"Fantasia/modules/musicplayer"
	"Fantasia/modules/roles"
	"Fantasia/modules/themeify"

	"Fantasia/system"
)

////////////////////////////////////////////
//            Generated by
//          tools/genmodules
////////////////////////////////////////////

// ModuleConfig ...
type ModuleConfig struct {
	Inverted    bool
	Audio       bool
	Booru       bool
	Channelpipe bool
	Dashboard   bool
	Eval        bool
	General     bool
	Images      bool
	Information bool
	Javascript  bool
	Musicplayer bool
	Roles       bool
	Themeify    bool

	AudioConfig       *audio.Config
	BooruConfig       *booru.Config
	DashboardConfig   *dashboard.Config
	ImagesConfig      *images.Config
	JavascriptConfig  *javascript.Config
	MusicplayerConfig *musicplayer.Config
}

// NewModuleConfig returns a new module configuration
func NewModuleConfig() ModuleConfig {
	return ModuleConfig{
		Inverted:    false,
		Audio:       true,
		Booru:       true,
		Channelpipe: true,
		Dashboard:   true,
		Eval:        true,
		General:     true,
		Images:      true,
		Information: true,
		Javascript:  true,
		Musicplayer: true,
		Roles:       true,
		Themeify:    true,

		AudioConfig:       audio.NewConfig(),
		BooruConfig:       booru.NewConfig(),
		DashboardConfig:   dashboard.NewConfig(),
		ImagesConfig:      images.NewConfig(),
		JavascriptConfig:  javascript.NewConfig(),
		MusicplayerConfig: musicplayer.NewConfig(),
	}
}

// RegisterModules builds a list of modules into the given system
func RegisterModules(s *system.System, config ModuleConfig) {
	if (config.Inverted && !config.Audio) || (!config.Inverted && config.Audio) {
		s.CommandRouter.SetCategory("Audio")
		if config.AudioConfig != nil {
			s.BuildModule(&audio.Module{Config: config.AudioConfig})
		} else {
			s.BuildModule(&audio.Module{Config: audio.NewConfig()})
		}
		log.Println("loaded audio module...")
	}
	if (config.Inverted && !config.Booru) || (!config.Inverted && config.Booru) {
		s.CommandRouter.SetCategory("Booru")
		if config.BooruConfig != nil {
			s.BuildModule(&booru.Module{Config: config.BooruConfig})
		} else {
			s.BuildModule(&booru.Module{Config: booru.NewConfig()})
		}
		log.Println("loaded booru module...")
	}
	if (config.Inverted && !config.Channelpipe) || (!config.Inverted && config.Channelpipe) {
		s.CommandRouter.SetCategory("Channelpipe")
		s.BuildModule(&channelpipe.Module{})
		log.Println("loaded channelpipe module...")
	}
	if (config.Inverted && !config.Dashboard) || (!config.Inverted && config.Dashboard) {
		s.CommandRouter.SetCategory("Dashboard")
		if config.DashboardConfig != nil {
			s.BuildModule(&dashboard.Module{Config: config.DashboardConfig})
		} else {
			s.BuildModule(&dashboard.Module{Config: dashboard.NewConfig()})
		}
		log.Println("loaded dashboard module...")
	}
	if (config.Inverted && !config.Eval) || (!config.Inverted && config.Eval) {
		s.CommandRouter.SetCategory("Eval")
		s.BuildModule(&eval.Module{})
		log.Println("loaded eval module...")
	}
	if (config.Inverted && !config.General) || (!config.Inverted && config.General) {
		s.CommandRouter.SetCategory("General")
		s.BuildModule(&general.Module{})
		log.Println("loaded general module...")
	}
	if (config.Inverted && !config.Images) || (!config.Inverted && config.Images) {
		s.CommandRouter.SetCategory("Images")
		if config.ImagesConfig != nil {
			s.BuildModule(&images.Module{Config: config.ImagesConfig})
		} else {
			s.BuildModule(&images.Module{Config: images.NewConfig()})
		}
		log.Println("loaded images module...")
	}
	if (config.Inverted && !config.Information) || (!config.Inverted && config.Information) {
		s.CommandRouter.SetCategory("Information")
		s.BuildModule(&information.Module{})
		log.Println("loaded information module...")
	}
	if (config.Inverted && !config.Javascript) || (!config.Inverted && config.Javascript) {
		s.CommandRouter.SetCategory("Javascript")
		if config.JavascriptConfig != nil {
			s.BuildModule(&javascript.Module{Config: config.JavascriptConfig})
		} else {
			s.BuildModule(&javascript.Module{Config: javascript.NewConfig()})
		}
		log.Println("loaded javascript module...")
	}
	if (config.Inverted && !config.Musicplayer) || (!config.Inverted && config.Musicplayer) {
		s.CommandRouter.SetCategory("Musicplayer")
		if config.MusicplayerConfig != nil {
			s.BuildModule(&musicplayer.Module{Config: config.MusicplayerConfig})
		} else {
			s.BuildModule(&musicplayer.Module{Config: musicplayer.NewConfig()})
		}
		log.Println("loaded musicplayer module...")
	}
	if (config.Inverted && !config.Roles) || (!config.Inverted && config.Roles) {
		s.CommandRouter.SetCategory("Roles")
		s.BuildModule(&roles.Module{})
		log.Println("loaded roles module...")
	}
	if (config.Inverted && !config.Themeify) || (!config.Inverted && config.Themeify) {
		s.CommandRouter.SetCategory("Themeify")
		s.BuildModule(&themeify.Module{})
		log.Println("loaded themeify module...")
	}

}
